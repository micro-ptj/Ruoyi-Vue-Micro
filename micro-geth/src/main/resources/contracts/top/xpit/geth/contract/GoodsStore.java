package top.xpit.geth.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class GoodsStore extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b506118a4806100206000396000f3fe608060405260043610620000865760003560e01c8063b90190661162000055578063b90190661462000186578063c6dfb2ef14620001ca578063c93b019014620001ea578063e2e0745814620002185762000086565b806305d63070146200008b57806364c0187914620000cf578063706c66d6146200011357806377139b021462000158575b600080fd5b3480156200009857600080fd5b50620000b76004803603810190620000b1919062000791565b6200025c565b604051620000c69190620007d4565b60405180910390f35b348015620000dc57600080fd5b50620000fb6004803603810190620000f5919062000791565b620002b0565b6040516200010a91906200080e565b60405180910390f35b3480156200012057600080fd5b506200013f600480360381019062000139919062000791565b62000360565b6040516200014f92919062000870565b60405180910390f35b3480156200016557600080fd5b506200018460048036038101906200017e9190620008e2565b62000410565b005b3480156200019357600080fd5b50620001b26004803603810190620001ac919062000791565b62000527565b604051620001c1919062000954565b60405180910390f35b620001e86004803603810190620001e2919062000791565b62000564565b005b348015620001f757600080fd5b5062000216600480360381019062000210919062000791565b620005fd565b005b3480156200022557600080fd5b506200024460048036038101906200023e919062000791565b62000695565b604051620002539190620007d4565b60405180910390f35b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16319050919050565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b81526004016020604051808303816000875af115801562000333573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003599190620009a2565b9050919050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b5e221c16040518163ffffffff1660e01b81526004016040805180830381865afa158015620003e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000407919062000a1c565b91509150915091565b816001819055508360028190555082600481905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060025460015460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040516200049d9062000743565b620004ac949392919062000a74565b604051809103906000f080158015620004c9573d6000803e3d6000fd5b5090508060036000600454815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6003600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631998aeef346040518263ffffffff1660e01b81526004016000604051808303818588803b158015620005e057600080fd5b505af1158015620005f5573d6000803e3d6000fd5b505050505050565b6003600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a24f46c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200067957600080fd5b505af11580156200068e573d6000803e3d6000fd5b5050505050565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663787c0a6c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000716573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200073c919062000ac1565b9050919050565b610d7b8062000af483390190565b600080fd5b6000819050919050565b6200076b8162000756565b81146200077757600080fd5b50565b6000813590506200078b8162000760565b92915050565b600060208284031215620007aa57620007a962000751565b5b6000620007ba848285016200077a565b91505092915050565b620007ce8162000756565b82525050565b6000602082019050620007eb6000830184620007c3565b92915050565b60008115159050919050565b6200080881620007f1565b82525050565b6000602082019050620008256000830184620007fd565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000858826200082b565b9050919050565b6200086a816200084b565b82525050565b60006040820190506200088760008301856200085f565b620008966020830184620007c3565b9392505050565b6000620008aa826200082b565b9050919050565b620008bc816200089d565b8114620008c857600080fd5b50565b600081359050620008dc81620008b1565b92915050565b60008060008060808587031215620008ff57620008fe62000751565b5b60006200090f878288016200077a565b945050602062000922878288016200077a565b935050604062000935878288016200077a565b92505060606200094887828801620008cb565b91505092959194509250565b60006020820190506200096b60008301846200085f565b92915050565b6200097c81620007f1565b81146200098857600080fd5b50565b6000815190506200099c8162000971565b92915050565b600060208284031215620009bb57620009ba62000751565b5b6000620009cb848285016200098b565b91505092915050565b620009df816200084b565b8114620009eb57600080fd5b50565b600081519050620009ff81620009d4565b92915050565b60008151905062000a168162000760565b92915050565b6000806040838503121562000a365762000a3562000751565b5b600062000a4685828601620009ee565b925050602062000a598582860162000a05565b9150509250929050565b62000a6e816200089d565b82525050565b600060808201905062000a8b6000830187620007c3565b62000a9a6020830186620007c3565b62000aa9604083018562000a63565b62000ab86060830184620007c3565b95945050505050565b60006020828403121562000ada5762000ad962000751565b5b600062000aea8482850162000a05565b9150509291505056fe60806040523480156200001157600080fd5b5060405162000d7b38038062000d7b833981810160405281019062000037919062000141565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508284620000859190620001e2565b60018190555080600681905550505050506200021d565b600080fd5b6000819050919050565b620000b681620000a1565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010982620000dc565b9050919050565b6200011b81620000fc565b81146200012757600080fd5b50565b6000815190506200013b8162000110565b92915050565b600080600080608085870312156200015e576200015d6200009c565b5b60006200016e87828801620000c5565b94505060206200018187828801620000c5565b935050604062000194878288016200012a565b9250506060620001a787828801620000c5565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620001ef82620000a1565b9150620001fc83620000a1565b9250828201905080821115620002175762000216620001b3565b5b92915050565b610b4e806200022d6000396000f3fe6080604052600436106100555760003560e01c806312fa6feb1461005a5780631998aeef146100855780632a24f46c1461008f5780633ccfd60b146100a6578063787c0a6c146100d1578063b5e221c1146100fc575b600080fd5b34801561006657600080fd5b5061006f610128565b60405161007c919061078d565b60405180910390f35b61008d61013b565b005b34801561009b57600080fd5b506100a46102cc565b005b3480156100b257600080fd5b506100bb610613565b6040516100c8919061078d565b60405180910390f35b3480156100dd57600080fd5b506100e6610737565b6040516100f391906107c1565b60405180910390f35b34801561010857600080fd5b50610111610741565b60405161011f92919061081d565b60405180910390f35b600560009054906101000a900460ff1681565b600154421115610180576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610177906108a3565b60405180910390fd5b60035434116101c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bb9061090f565b60405180910390fd5b6000600354146102495760035460046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610241919061095e565b925050819055505b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346003819055507ff4757a49b326036464bec6fe419a4ae38c8a02ce3e68bf0809674f6aab8ad30033346040516102c292919061081d565b60405180910390a1565b600154421015610311576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610308906109de565b60405180910390fd5b600560009054906101000a900460ff1615610361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035890610a70565b60405180910390fd5b6001600560006101000a81548160ff0219169083151502179055507fdaec4582d5d9595688c8c98545fdd1c696d41c6aeaeb636737e84ed2f5c00eda600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003546040516103d192919061081d565b60405180910390a160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6003549081150290604051600060405180830381858888f19350505050158015610441573d6000803e3d6000fd5b50600060046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610611577fdaec4582d5d9595688c8c98545fdd1c696d41c6aeaeb636737e84ed2f5c00eda3060046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161053e929190610aef565b60405180910390a1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f1935050505015801561060f573d6000803e3d6000fd5b505b565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111561072e576000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505061072d5780600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000915050610734565b5b60019150505b90565b6000600154905090565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354915091509091565b60008115159050919050565b61078781610772565b82525050565b60006020820190506107a2600083018461077e565b92915050565b6000819050919050565b6107bb816107a8565b82525050565b60006020820190506107d660008301846107b2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610807826107dc565b9050919050565b610817816107fc565b82525050565b6000604082019050610832600083018561080e565b61083f60208301846107b2565b9392505050565b600082825260208201905092915050565b7f41756374696f6e20616c726561647920656e6465642e00000000000000000000600082015250565b600061088d601683610846565b915061089882610857565b602082019050919050565b600060208201905081810360008301526108bc81610880565b9050919050565b7f546865726520616c7265616479206973206120686967686572206269642e0000600082015250565b60006108f9601e83610846565b9150610904826108c3565b602082019050919050565b60006020820190508181036000830152610928816108ec565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610969826107a8565b9150610974836107a8565b925082820190508082111561098c5761098b61092f565b5b92915050565b7f41756374696f6e206e6f742079657420656e6465642e00000000000000000000600082015250565b60006109c8601683610846565b91506109d382610992565b602082019050919050565b600060208201905081810360008301526109f7816109bb565b9050919050565b7f61756374696f6e456e642068617320616c7265616479206265656e2063616c6c60008201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b6000610a5a602383610846565b9150610a65826109fe565b604082019050919050565b60006020820190508181036000830152610a8981610a4d565b9050919050565b6000819050919050565b6000610ab5610ab0610aab846107dc565b610a90565b6107dc565b9050919050565b6000610ac782610a9a565b9050919050565b6000610ad982610abc565b9050919050565b610ae981610ace565b82525050565b6000604082019050610b046000830185610ae0565b610b1160208301846107b2565b939250505056fea2646970667358221220b8cf343bcea0fad2a44baca3e2899ff725c654dea5ca5a024670c5d3d6d686ae64736f6c63430008130033a264697066735822122038afb2a59287888ebd56b7362f90172124147039494889aa66e4b21a4d3a349464736f6c63430008130033";

    public static final String FUNC_CREATEGOODS = "createGoods";

    public static final String FUNC_ESCROWADDRESS = "escrowAddress";

    public static final String FUNC_ESCROWAUCTIONEND = "escrowAuctionEnd";

    public static final String FUNC_ESCROWAUCTIONENDTIME = "escrowAuctionEndTime";

    public static final String FUNC_ESCROWBID = "escrowBid";

    public static final String FUNC_ESCROWWINNERBIDDER = "escrowWinnerBidder";

    public static final String FUNC_ESCROWWITHDRAW = "escrowWithdraw";

    public static final String FUNC_GETCONTRACTBALANCE = "getContractBalance";

    @Deprecated
    protected GoodsStore(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected GoodsStore(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected GoodsStore(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected GoodsStore(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> createGoods(BigInteger _startTime, BigInteger _goodsId, BigInteger _biddingTime, String _beneficiary) {
        final Function function = new Function(
                FUNC_CREATEGOODS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_startTime), 
                new org.web3j.abi.datatypes.generated.Uint256(_goodsId), 
                new org.web3j.abi.datatypes.generated.Uint256(_biddingTime), 
                new org.web3j.abi.datatypes.Address(160, _beneficiary)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> escrowAddress(BigInteger _goodsId) {
        final Function function = new Function(FUNC_ESCROWADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_goodsId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> escrowAuctionEnd(BigInteger _goodsId) {
        final Function function = new Function(
                FUNC_ESCROWAUCTIONEND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_goodsId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> escrowAuctionEndTime(BigInteger _goodsId) {
        final Function function = new Function(FUNC_ESCROWAUCTIONENDTIME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_goodsId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> escrowBid(BigInteger _goodsId) {
        final Function function = new Function(
                FUNC_ESCROWBID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_goodsId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> escrowWinnerBidder(BigInteger _goodsId) {
        final Function function = new Function(FUNC_ESCROWWINNERBIDDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_goodsId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> escrowWithdraw(BigInteger _goodsId) {
        final Function function = new Function(
                FUNC_ESCROWWITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_goodsId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getContractBalance(BigInteger _goodsId) {
        final Function function = new Function(FUNC_GETCONTRACTBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_goodsId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static GoodsStore load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new GoodsStore(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static GoodsStore load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new GoodsStore(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static GoodsStore load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new GoodsStore(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static GoodsStore load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new GoodsStore(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<GoodsStore> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(GoodsStore.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<GoodsStore> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(GoodsStore.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<GoodsStore> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(GoodsStore.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<GoodsStore> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(GoodsStore.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
